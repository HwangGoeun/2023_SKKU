#include <Car_Library.h>
#include <ros.h>
#include <std_msgs/String.h>

//////////////////////////////////

int left_motor_speed = 100; 
int right_motor_speed = 100;
int steering = 50;
int left_steering = 255;
int right_steering = 255; 

///////////////////////////////////////////
int motorA1_1 = 3;
int motorA1_2 = 4;

int motorB1_1 = 5;
int motorB1_2 = 6;

int motorB2_1 = 8;
int motorB2_2 = 9;
///////////////////////////////////////////

ros::NodeHandle nh;
String motor_run;

void move_go(){
  
  motor_backward(motorB1_1,motorB1_2,left_motor_speed);
  delay(100);
  motor_forward(motorB2_1,motorB2_2, right_motor_speed);
  delay(100);
  
  motor_hold(motorA1_1,motorA1_2);
  delay(100);

}

void move_left(){
  
  motor_backward(motorB1_1,motorB1_2,left_motor_speed);
  delay(100);
  motor_forward(motorB2_1,motorB2_2, right_motor_speed);
  delay(100);
  
  //motor_forward(motorA1_1,motorA1_2,left_steering);
  //delay(100);  
}

void move_right(){
  
  motor_backward(motorB1_1,motorB1_2,left_motor_speed);
  delay(100);
  motor_forward(motorB2_1,motorB2_2,right_motor_speed);
  delay(100);
  
  //motor_backward(motorA1_1,motorA1_2,right_steering);
  //delay(100);
  
}

void move_stop(){
  
  motor_hold(motorB1_1,motorB1_2);
  delay(100);
  motor_hold(motorB2_1,motorB2_2);
  delay(100);

  motor_hold(motorA1_1,motorA1_2);
  delay(100);
}

//
void move_back_steering(){
  
  motor_forward(motorB1_1,motorB1_2,left_motor_speed);
  delay(100);
  motor_backward(motorB2_1,motorB2_2,right_motor_speed);
  delay(100);
  
  //motor_backward(motorA1_1,motorA1_2,right_steering);
  //delay(100);
  
}

void move_back(){
  
  motor_forward(motorB1_1,motorB1_2,left_motor_speed);
  delay(100);
  motor_backward(motorB2_1,motorB2_2,right_motor_speed);
  delay(100);
  
  //motor_backward(motorA1_1,motorA1_2,steering);
  //delay(100);
  
}

//

void parking_cb(const std_msgs::String& msg) {

 
  motor_run=msg.data;

  if (motor_run == "GO"){
    move_go();
    delay(100);
  }

  else if (motor_run == "PARKING"){
      move_go();
      delay(8000);
      
      motor_forward(motorA1_1,motorA1_2,255);
      delay(1000);      
      move_left();
      delay(4000);

      motor_backward(motorA1_1,motorA1_2,255);
      delay(2000);   
      //motor_forward(motorA1_1,motorA1_2,100);    
      //delay(2000); 
      move_back_steering();
      delay(8000);
      
      move_stop();
      delay(3000);      

      
      motor_forward(motorA1_1,motorA1_2,100);
      delay(2000);
      move_go();
      delay(3000);
      

      
      motor_forward(motorA1_1,motorA1_2,255);
      delay(1000);
      move_go();
      delay(2000);
 
      motor_backward(motorA1_1,motorA1_2,80);
      delay(1000);

      move_go();
      delay(15000);
  }
  
}

ros::Subscriber <std_msgs::String> sub("parking", &parking_cb);
// ros::Subscriber <std_msgs::String> sub("color", &color_cb);

void setup(){
  
  Serial.begin(57600);
  
  pinMode(motorA1_1, OUTPUT);
  pinMode(motorA1_2, OUTPUT);
  
  pinMode(motorB1_1, OUTPUT);
  pinMode(motorB1_2, OUTPUT);
  
  pinMode(motorB2_1, OUTPUT);
  pinMode(motorB2_2, OUTPUT);

  nh.initNode();
  nh.subscribe(sub);
  
  motor_forward(motorA1_1,motorA1_2,255);
  delay(500);
  motor_backward(motorA1_1,motorA1_2,50);
  delay(3000);

  
}

void loop(){
  nh.spinOnce();
  delay(1);
  
}
